'''
	Trains the neural network.
	Uses data generated by @{data_generation_call}.
'''
import os
import numpy as np
import tensorflow as tf

from Settings.arguments import arguments
from Training.tf_data import create_input_fn
from Nn.value_nn import ValueNn

class Train(ValueNn):
	def __init__(self, train_dir, test_dir=None):
		'''
		@param: tf records training dir
		@param: tf records test dir
		'''
		# set up estimator from ValueNn
		super().__init__()
		# data dirs
		self.path_tfrecords_train = train_dir
		self.path_tfrecords_test = test_dir


	def train(self, steps):
		print('Training model...')
		# list of file paths
		filenames = [f.path for f in os.scandir(self.path_tfrecords_train)]
		# input function for estimator
		input_fn = create_input_fn( input_name=self.input_layer_name,
									output_name=self.output_layer_name,
									x_shape=self.x_shape, y_shape=self.y_shape,
									filenames=filenames, train=True )

		# input_fn = tf.estimator.inputs.numpy_input_fn(
		# 				    x={'input': np.random.rand(100,73)},
		# 				    y={'zero_sum_output': np.random.rand(100,72)},
		# 				    num_epochs=None, shuffle=True )

		# adding profiler
		# profiler_path = 'D:\\Datasets\\Pystack\\ProfileTest\\profiler'
		# with tf.contrib.tfprof.ProfileContext(profiler_path) as pctx:

		# train model
		self.estimator.train(input_fn=input_fn, steps=steps)
		print('Done!')


	def eval(self):
		if self.path_tfrecords_test is None: raise(Exception('test set directory path is not defined'))
		print('Evaluating model...')
		filenames = [f.path for f in os.scandir(self.path_tfrecords_test)] # list of file paths
		input_fn = create_input_fn( input_name=self.input_layer_name,
									output_name=self.output_layer_name,
									x_shape=self.x_shape, y_shape=self.y_shape,
									filenames=filenames, train=False )
		result = model.evaluate(input_fn=input_fn)
		print('Results:')
		print(result)




#
