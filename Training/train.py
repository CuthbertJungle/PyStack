'''
	Trains the neural network.
	Uses data generated by @{data_generation_call}.
'''

from ..Settings.arguments import arguments
from ..Nn.masked_huber_loss import MaskedHuberLoss

class Train():
	def __init__(self):
		pass

	def _save_model(self, model, epoch, valid_loss):
		''' Saves a neural net model to disk.
			The model is saved to `arguments.model_path` and
			labelled with the epoch number.
		@param: model the neural net to save
		@param: epoch the current epoch number
		@param: valid_loss the validation loss of the current network
		'''
		pass


	def feval(self, params_new, inputs, targets, mask):
		''' Function passed to torch's [optim package]
			(https://github.com/torch/optim)
		@param: params_new the neural network params
		@param: inputs the neural network inputs
		@param: targets the neural network targets
		@param: mask the mask vectors used for the loss function
		@return the masked Huber loss on `inputs` and `targets`
		@return the gradient of the loss function
		@see masked_huber_loss
		'''
		pass
		# set x to x_new, if different
    	# (in this simple implementation, x_new will typically always point to x,
    	# so the copy is really useless)
		# backward


	def train(self, network, data_stream, epoch_count):
		''' Trains the neural network.
			@param: network the neural network (see @{net_builder})
			@param: data_stream a @{data_stream|DataStream}
					object which provides the training data
			@param: epoch_count the number of epochs (passes of the training data) to train for
		'''
		pass
		# optimization loop
		# check validation loss
		# saving the model
		# end of train loop




train = Train()
